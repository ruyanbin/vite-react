// vite.config.ts
import { defineConfig } from 'file:///E:/web/react/vite-react/node_modules/.pnpm/vite@4.4.5_@types+node@20.4.7/node_modules/vite/dist/node/index.js';

// config/plugin/index.ts
import react from 'file:///E:/web/react/vite-react/node_modules/.pnpm/@vitejs+plugin-react-swc@3.3.2_vite@4.4.5/node_modules/@vitejs/plugin-react-swc/index.mjs';
import { visualizer } from 'file:///E:/web/react/vite-react/node_modules/.pnpm/rollup-plugin-visualizer@5.9.2_rollup@3.29.2/node_modules/rollup-plugin-visualizer/dist/plugin/index.js';
import ViteRestart from 'file:///E:/web/react/vite-react/node_modules/.pnpm/vite-plugin-restart@0.3.1_vite@4.4.5/node_modules/vite-plugin-restart/dist/index.mjs';
import { compression } from 'file:///E:/web/react/vite-react/node_modules/.pnpm/vite-plugin-compression2@0.10.5_rollup@3.29.2/node_modules/vite-plugin-compression2/dist/index.mjs';
import ViteImages from 'file:///E:/web/react/vite-react/node_modules/.pnpm/vite-plugin-vue-images@0.6.1/node_modules/vite-plugin-vue-images/dist/index.cjs';
import Icons from 'file:///E:/web/react/vite-react/node_modules/.pnpm/unplugin-icons@0.17.0/node_modules/unplugin-icons/dist/vite.mjs';
var createPlugins = (isBuild) => {
  const plugin = [
    react(),
    Icons({
      /* options */
    }),
    // eslint-disable-next-line @typescript-eslint/no-unsafe-call
    ViteImages({
      dirs: ['src/assets'],
      // 图像目录的相对路径
      extensions: ['jpg', 'jpeg', 'png', 'svg', 'webp'],
      // 有效的图像扩展
      customResolvers: [],
      // 覆盖名称->图像路径解析的默认行为
      customSearchRegex: '([a-zA-Z0-9]+)',
      // 重写搜索要替换的变量的Regex。
    }),
    !isBuild &&
      ViteRestart({
        restart: ['my.config.[jt]s'],
      }),
    isBuild && visualizer(),
    isBuild &&
      compression({ algorithm: 'brotliCompress', exclude: [/\.(br)$/, /\.(gz)$/], deleteOriginalAssets: true }),
  ];
  return plugin;
};

// config/resolve.ts
import { resolve } from 'path';
var __vite_injected_original_dirname = 'E:\\web\\react\\vite-react\\config';
var resolveBaseConfig = () => {
  return {
    alias: {
      '#': resolve(__vite_injected_original_dirname, '../src'),
      '#a': resolve(__vite_injected_original_dirname, '../src/assets'),
      '#c': resolve(__vite_injected_original_dirname, '../src/components'),
      '#config': resolve(__vite_injected_original_dirname, '../src/config'),
      '#h': resolve(__vite_injected_original_dirname, '../src/hooks'),
      '#v': resolve(__vite_injected_original_dirname, '../src/views'),
      '#p': resolve(__vite_injected_original_dirname, '../src/router'),
      '#s': resolve(__vite_injected_original_dirname, '../src/redux'),
    },
    dedupe: [],
    // 强制 Vite 始终将列出的依赖项解析为同一副本
    conditions: [],
    // 解决程序包中 情景导出 时的其他允许条件
    mainFields: [],
    // 解析包入口点尝试的字段列表
    extensions: ['.mjs', '.js', '.ts', '.jsx', '.tsx', '.json'],
    // 导入时想要忽略的扩展名列表
    preserveSymlinks: false,
    // 启用此选项会使 Vite 通过原始文件路径确定文件身份
  };
};

// config/server.ts
var serverConfig = () => {
  return {
    hmr: true,
    // 开启热热更新
    open: true,
    // 项目启动自动打开页面
    host: 'localhost',
    // 指定服务器应该监听哪个 IP 地址
    port: 3e3,
    // 指定开发服务器端口
    https: false,
    // 启用 TLS + HTTP/2
    strictPort: true,
    // 若端口已被占用则会直接退出
    cors: true,
    // 配置 CORS
    force: true,
    // 强制使依赖预构建
    middlewareMode: '',
    // 以中间件模式创建 Vite 服务器 fs: {
    strict: true,
    // 限制为工作区 root 路径以外的文件的访问
    allow: [],
    // 限制哪些文件可以通过 /@fs/ 路径提供服务
    deny: ['.env', '.env.*', '*.{pem,crt}'],
    // 用于限制 Vite 开发服务器提供敏感文件的黑名单
    origin: '',
    // 用于定义开发调试阶段生成资产的 origin
    proxy: {
      // 配置自定义代理规则
      '/api': {
        target: 'http://jsonplaceholder.typicode.com',
        changeOrigin: true,
        rewrite: (path) => path.replace(/^\/api/, ''),
      },
    },
  };
};

// config/css.ts
var cssBaseConfig = () => {
  return {
    // modules配置最终会丢给postcss modules
    modules: {
      // 是对css模块化的默认行为进行覆盖
      localsConvention: 'camelCaseOnly',
      // 修改生成的配置对象的key的展示形式(驼峰还是中划线形式)
      scopeBehaviour: 'local',
      // 配置当前的模块化行为是模块化还是全局化 (有hash就是开启了模块化的一个标志, 因为他可以保证产生不同的hash值来控制我们的样式类名不被覆盖)
      // generateScopedName: "[name]_[local]_[hash:5]" // <https://github.com/webpack/loader-utils#interpolatename>
      // generateScopedName: (name, filename, css) => {
      //     // name -> 代表的是你此刻css文件中的类名
      //     // filename -> 是你当前css文件的绝对路径
      //     // css -> 给的就是你当前样式
      //     console.log("name", name, "filename", filename, "css", css); // 这一行会输出在哪？？？ 输出在node
      //     // 配置成函数以后, 返回值就决定了他最终显示的类型
      //     return `${name}_${Math.random().toString(36).substr(3, 8) }`;
      // }
      hashPrefix: 'hello',
      // 生成hash会根据你的类名 + 一些其他的字符串(文件名 + 他内部随机生成一个字符串)去进行生成, 如果你想要你生成hash更加的独特一点, 你可以配置hashPrefix, 你配置的这个字符串会参与到最终的hash生成, （hash: 只要你的字符串有一个字不一样, 那么生成的hash就完全不一样, 但是只要你的字符串完全一样, 生成的hash就会一样）
      globalModulePaths: ['./componentB.module.css'],
      // 代表你不想参与到css模块化的路径
    },
    postcss: '',
    // 内联的 PostCSS 配置 如果提供了该内联配置，Vite 将不会搜索其他 PostCSS 配置源
    preprocessorOptions: {
      // css的预处理器选项
      scss: {
        additionalData: `$injectedColor: orange;`,
      },
    },
  };
};

// config/preview.ts
var previewBaseConfig = () => {
  return {
    port: 5e3,
    // 指定开发服务器端口
    strictPort: true,
    // 若端口已被占用则会直接退出
    https: false,
    // 启用 TLS + HTTP/2
    open: true,
    // 启动时自动在浏览器中打开应用程序
    proxy: {
      // 配置自定义代理规则
      '/api': {
        target: 'http://jsonplaceholder.typicode.com',
        changeOrigin: true,
        rewrite: (path) => path.replace(/^\/api/, ''),
      },
    },
    cors: true,
    // 配置 CORS
  };
};

// config/optimizeDeps.ts
var optimizeDepsBaseConfig = () => {
  return {
    entries: [],
    // 指定自定义条目——该值需要遵循 fast-glob 模式
    exclude: [],
    // 在预构建中强制排除的依赖项
    include: [],
    // 可强制预构建链接的包
    keepNames: false,
    // true 可以在函数和类上保留 name 属性
  };
};

// config/ssr.ts
var ssrBaseConfig = () => {
  return {
    external: [],
    // 列出的是要为 SSR 强制外部化的依赖,
    noExternal: '',
    // 列出的是防止被 SSR 外部化依赖项
    target: 'node',
    // SSR 服务器的构建目标
  };
};

// vite.config.ts
var vite_config_default = ({ mode }) => {
  const isBuild = mode == 'production' ? true : false;
  console.log(isBuild, 'isBuild');
  return defineConfig({
    root: process.cwd(),
    // 项目根目录（index.html 文件所在的位置）,
    publicDir: 'public',
    // 静态资源服务的文件夹
    cacheDir: 'node_modules/.vite',
    // 存储缓存文件的目录
    postcss: '',
    // 内联的 PostCSS 配置 如果提供了该内联配置，Vite 将不会搜索其他 PostCSS 配置源
    preprocessorOptions: {
      // css的预处理器选项
      scss: {
        additionalData: `$injectedColor: orange;`,
      },
    },
    esbuild: {
      // 最常见的用例是自定义 JSX
      jsxFactory: 'h',
      jsxFragment: 'Fragment',
      drop: ['console', 'debugger'],
      // 删除 所有的console 和 debugger
    },
    logLevel: 'info',
    // 调整控制台输出的级别 'info' | 'warn' | 'error' | 'silent'
    clearScreen: true,
    // 设为 false 可以避免 Vite 清屏而错过在终端中打印某些关键信息
    envDir: '/',
    // 用于加载 .env 文件的目录
    envPrefix: [],
    // 以 envPrefix 开头的环境变量会通过 import.meta.env 暴露在你的客户端源码中
    plugins: createPlugins(isBuild),
    resolve: resolveBaseConfig(),
    server: serverConfig(),
    ssr: ssrBaseConfig(),
    css: cssBaseConfig(),
    preview: previewBaseConfig(),
    optimizeDeps: optimizeDepsBaseConfig(),
  });
};
export { vite_config_default as default };
//# sourceMappingURL=data:application/json;base64,
